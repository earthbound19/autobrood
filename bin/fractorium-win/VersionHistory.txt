1.0.0.0 06/17/2016
--User changes
 -Officially transition out of beta into a full 1.0 release.
 -Add new options to EmberGenome to better help assess which variations have certain characteristics. The options are:
  --sumvars: Display the names of all regular variations which have the default behavior of summing their outputs and exit.
  --assignvars: Display the names of all regular variations which have the non-standard behavior of assigning their outputs and exit.
  --ppsumvars: Display the names of all pre/post variations which have the non-standard behavior of summing their outputs and exit.
  --ppassignvars: Display the names of all pre/post variations which have the default behavior of assigning their outputs and exit.
  --dcvars: Display the names of all variations which use direct coloring and exit.
  --statevars: Display the names of all variations which alter their state on each iteration and exit.
  --parvars: Display the names of all variations which have parameters and exit.
  --nonparvars: Display the names of all variations which do not have parameters (weight only) and exit.
 -Add two new options to EmberGenome which are used when generating an animation sequence:
  --startcount: Add this number to the filename of each flame.
  --padding: Override the automatically calculated amount of padding zeroes added to each filename.
 -Allow for filtering in the Variations Dialog based on the same types listed in the EmberGenome options.
 -Add a button to randomize both pre and post affine transforms to values between -1 to 1.
 -Add animation sequence creation to Fractorium.
 -Add fractorium.com link to the about box.

--Bug fixes
 -Fix final render dialog failure when minimizing and restoring during a render on Linux. Note this bug was not present on Windows.
 -Switching between SP and DP before previews had finished would set the current flame back to the first one in the file.
 -Prevent filenames in command line programs from using scientific notation when rendering a large number of frames.
 -Fix tab orders to match newer GUI items which were overlooked in previous releases.
 -Re-render previews if transparency value in the options dialog was changed. Re-rendering was previously only done if early clip or y axis up was changed.
 -Use transparency when rendering thumbnail previews.
  
--Code changes
 -Make VariationList vectors have const elements since no callers should ever change them.
 -Add new function to VariationList to retrieve a const ref to the parametric variations.
 -Move some search functions out of EmberTester and into EmberCommon.h.
 -More correctly populate VariationList::m_ParametricVariations and VariationList::m_NonParametricVariations to account for variations which have params only used for precalc.
 -Consolidate some of the code in VariationList which searches by name.
 -Use references rather than pointers when grabbing pre/post affines.
 -Wrap EmberCommon.h in a namespace called EmberCommon.
 -Move FormatName() from EmberGenome to EmberCommon.h/cpp
 -Add a prefix parameter to EmberFile::DefaultFilename() to allow for creating a default filename for sequences.
 -When showing the final render dialog, allow specifying where it came from: the toolbar or the render sequence button.
 -Refactor all preview rendering code out into its own class hierarchy with overrides for the main window and the final render dialog.
 -Remove all preview render cancelling functions, they are now built into the new class hierarchy and a new render will not start until the previous one is stopped.
 -Add two new function ConstrainLow() and ConstrainHigh() which wrap constraining two min/max spinboxes to each others' values.
 -Add a bool to FractoriumEmberControllerBase::CopyEmberFile() to specify whether to copy the main file or the sequence file. This is somewhat of a hack and was done in a rush.
 -Add a bool to FractoriumEmberControllerBase::SetEmberFile() to specify whether to move the file rather than copy. This is used in FinalRenderEmberController and improves efficiency.
 -Add wrapper functions for variations filter dialog settings.
 -Tooltip cleanups.
 -General code cleanup.
 
0.9.9.6 Beta 05/05/2016
--User changes
	-The concept of "saving back to file in memory" has been removed. The current ember is saved back to memory whenever the render completes and the thumbnail will be updated each time.
		--Edits will not save back to the file in memory on render completion when preview renderer is running.
	-Make the default interpolation type be smooth.
	-Highlight power is now on by default.
	-Better handling of crossed min/max DE filter values on the GUI.
	-Changes to spatial and density filter values will no longer restart the entire render because a fixed size gutter is used.
	-crackle is now 5-10 times faster as a result of using cached values as is done on the CPU. These were previously omitted due to a bug elsewhere in the code that was erroneously attributed to the crackle caching mechanism.
	-Allow for adjustments on the Flame tab to apply to all open flames in the file.
		--Add apply all functionality to flatten/unflatten menu items.
	-Add two new buttons to the color tab to randomize and toggle the xform color indices.
	-Change drag n drop behavior: the default is now to append, hold Ctrl to overwrite.
	-Set max value of zoom to 25 because it will crash with values around 28 or 29 due to numeric overflow when scaling quality.
	-Update links in About Dialog.
	-Move the color curves control to the Palette tab.
	-Change dark.qss to hide dotted selection outline around checkboxes. Users must reload it to take effect.
	-Allow for dragging around flames in the library tab. This is useful for setting up the order of an animation.
	-Make the opening of large files in Fractorium much more efficient when not-appending.
	-Make the opening of large files in all EmberRender and EmberAnimate more efficient.
	-Better error reporting when opening files.
	-Command line programs now default to using double precision.
		--Report precision in command line programs.
	-Cleanup some options text for the command line programs.
	-Make randoms in EmberGenome have default dimensions of 1920 x 1080.
	-Changed/removed several command line options:
		--Remove the option --intpalette to format the palette in the xml as ints. If they are not hex formatted, then they should always be float. This option was pointless.
		--The --bits argument has been removed and replaced with --sp to specify single precision. If omitted, DP is used.
		--Remove the --seed option, it was never used.
		--Remove the --sub_batch_size option, it has been part of the Xml for a long time.
		--Remove --hex_palette option for EmberRender, it only makes sense in EmberAnimate and EmberGenome.
		--Set enable_jpg_comments and enable_png_comments to false by default. It was a very bad idea to have them be true because it reveals the flame parameters used to render the image which many artists guard closely.
		--Remove --time option for EmberAnimate, it was redundant with --frame.
		--Make --enable_jpg_comments and --enable_png_comments just be bools that when present mean true, rather than having to specify =true.
		--Add a new argument --ts for EmberAnimate to allow the user to specify the temporal samples value to use for the entire animation. Useful for testing.
		--Remove the --strip option from EmberGenome. It was useless and was likely just a carry over from flam3 during its early debugging stages when testing strips.
		--Prevent --inter and --rotate in EmberGenome from rotating backward before the first flame since it doesn't really make sense.
	-Support reading cam_zoom from xml as zoom since JWildfire uses cam_zoom.
	-Ensure every loaded flame has at least one xform in it.
	-Always force times of each flame to increase from zero when saving a file.
	-Remove check for times when doing a sequence in EmberGenome because the original times are never used there.
	
--Bug fixes
	-Place last.flame in ~/.config/fractorium on Linux.
	-Attempt to prevent crash when selecting OpenCL in the final render dialog when unsupported hardware is present.
		--This works by selecting the last known good device in the main window.
	-Correctly label interpolation types in the combo in the animation table on the Flame tab.
	-Remove extra space in info tree text when dealing with a linked xform.
	-Update summary xform name field whenever xform name changes.
	-Get rid of selection border on summary tab xform tree cells.
	-Only add variations from Xml that have a non-zero weight. There seemed to be spurious flattens coming from Apo with a weight of 0.
	-Get rid of leftover artifacts that would appear on preview thumbnails when either switching SP/DP or re-rendering previews.
	-Filename extension was not being appended on Linux when saving as Xml, thus making it impossible to drag that file back in because drop is filtered on extension.
	-Continuous update was broken.
	-Force repaint on xform selection checkbox change to ensure circles are immediately drawn around selected xforms.
	-dc_perlin was crashing on Nvidia when using SP.
	-Crash when opening an Xml with less than 2 flames in it.
	-Fix crash when using smooth interpolation in EmberGenome.
	-Print error and exit EmberGenome when sequencing if times are not sorted.
	-Multi-GPU synchronization was not actually thread safe and was likely doing less iters than requested. It is now properly synchronized.
	-The saving of last.flame during editing was appending the file when it should have been replacing.
	-It was impossible for EmberGenome to create a random flame. It can now be done by specifying no arguments: EmberGenome.exe
	-Crossing in EmberGenome was not logging the performed actions to the edit Xml tag.
	-Apply sub batch size and fuse count to template files used on the command line.
	-Use new default filter types (log and smooth) with template files.
	-Properly seed rands in EmberAnimate when specifying --isaac_seed and using more than one device with --opencl.
  
--Code changes
	-Make DE block size always be 16x16, this should help stability on some Nvidia cards. No changes for AMD cards since they were that size already.
		--Since the block size is now so small, do not reduce it further when supersampling.
	-Clean up some variable names and documentation around OpenCL DE to be more clear.
	-Gutters are now a fixed size of 8 * supersample.
	-Use stl data() member to get pointer to first element instead of &vec[0].
	-Eliminate extra calls in renderer to ComputeBounds(), CreateSpatialFilter() and CreateTemporalFilter() to only be done at the start of a render.
	-Another attempt at vectorizing LogScaleDensityFilter(). Vectorizes, but not sure if it helps.
	-Some other loop optimizations in Renderer.
	-No longer check temporal samples in response to some control changes, they are always 1 in the interactive renderer.
	-Make summing histograms from one or more secondary devices to the primary a little more elegant by using HOST_PTR. This requires one less copy.
	-Move GCC compiler spec to C++14. Building with 5.3 now on linux.
	-Use inline member data initializers.
	-Make a #define for static for use in Utils.h to make things a little cleaner.
	-Make various functions able to take arbitrary collections as their parameters rather than just vectors.
	-Make library collection a list rather than vector. This alleviates the need to re-sync pointers whenever the collection changes.
	-Subclass QTreeWidget for the library tree. Two new files added for this.
	-Remove all usage of #ifdef ROW_ONLY_DE in DEOpenCLKernelCreator, it was never used.
	-Add move constructor and assignment operator to EmberFile.
	-Add the ability to use a pointer to outside memory in the renderer for the vector of Ember<T>.
	-Make a lot more functions const where they should be.
	-Remove save back to file in memory icon, document-hf-insert.png.
	-Use raw array of floats in OpenCL for perlin noise, rather than float3/double3.
	-Add some default cases to dc_perlin.
	-Redo singleton pattern yet again.
	-Pass XML_PARSE_HUGE to xmlReadMemory() to allow for reading large Xml files.
	-Optimize Interpolater by making it a non-static class by adding some members used for caching values during interpolation.
	-Cache values in SheepTools as well, which was already a non-static class.
	-Use cerr in SheepTools instead of cout.
	-Set m_SubBatchSize and m_FuseCount to default values in Ember::Clear().
	-Make EmberOptionEntry<T>::operator() return a const reference instead of a copy.
	-General cleanup.
 
b5341c7
0.9.9.5 Beta 03/04/2016
--User changes
	-None.
	
--Bug fixes
	-Fix crash when using Lanczos2 filter with color curves due to negative numbers. Fix by passing abs() of first argument to pow() in Renderer::GammaCorrection().
	-Fix crash in hexes with SP. Rounding error caused out of bounds index.
	-Do not reset locked affine scale on new flame or undo.
	-Gracefully recover from reading a bad palette file.
	-Gracefully recover from reading flame file with unknown params.
	-Available memory size checking in the final render dialog was accidentally removed during the multi-gpu work last year. Add it back in.

--Code changes
	-Migrate to Qt 5.5.1
	-Remove dependency projects from the solution. Move to a project design where they are built once via command line and stored in a /Deps folder.
		--Because of this, libpng is built as a static lib instead of a dll because that's what its command line makefile supports.
	--Remove libpng16.dll from Wix installer.
	-Remove all configs except for debug and release.
	-Remove all platforms except for x64.
	-Add #define __TBB_NO_IMPLICIT_LINKAGE 1 to prevent tbb from looking for tbb_debug.lib by default on debug builds.
	-Put Ember.rc in a filter folder in the project.
	-Place pragma warning disable statements in PCH files rather than in projects. This makes it easier when using Qt Creator.
	-Move all resource files to the MSVC folder.
	-Set all targets in QtCreator project to their lowercase names to be more *nix friendly. Set -l link statements to use these new lowercase names for ember and embercl.
	-Rework Qt projects to favor shadow builds.
	-Remove the symlinks.sh file and all references to it. It was never needed. Instead, just specify multiple include and link paths in the .pro files.
	-Change WIN32 to _WIN32.
	-Fix a few code warnings.
	-Make usage of VarFuncs more consistent by moving some global functions there.
	-Make CircleTrans1 a little safer by calling Zeps() on m_Sc during precalc.
	-Major work on Qt Creator builds.

0.9.9.4 Beta 02/21/2016
--User changes
	-Allow for stopping the renderer in the main window. This makes it more efficient when entering many parameters, such as when following a tutorial.
	-Add support for new variations: erf, gamma, jac_cn, jac_dn, jac_sn, logDB, pressure_wave, pRose3D, splits3D, w, waves2b, x, xerf, y, z.
	-Inform user of the start and stop of file parsing in EmberAnimate because the files could potentially be very large.
	-Move the follwing fields to a new table called Animation: Interpolation, Affine Interpolation, Temporal Samples, Temporal Filter Width, Temporal Filter Type.
		--These currently have no effect on the interactive renderer and instead are used when running flames through EmberGenome to generate sequences, and then animating them in Fractorium or EmberAnimate.
	-Add new parameter overrides for EmberRender and EmberAnimate which directly assign values to all flames being rendered, rather than scale:
		  --quality
		  --demin
		  --demax
	-Allow locking of the scale at which affine circles are displayed.
	-Allow user to toggle whether xform will be animated when generating sequences. Also show the animate value when loading.
	-Add variations changes to the list of functionality that can be applied to all xforms using the Select tab.
	-Allow for graphical affine adjustments to apply to multiple selected xforms.
	-Slight optimization of the pie variation.
	-Undo state is only saved when the render completes and the mouse buttons are released. This helps avoid intermediate steps for quickly completing renders while dragging.
	-Add some keyboard shortcuts for toolbar and menu items.
	-Make info tab tree always expanded.
	-Draw selection circles around all selected xforms plus the current one.
	
--Bug fixes
	-Crash when supersample minus final spatial filter width was negative.
	-Left pad instead of right pad names of sequence outputs from EmberGenome.
	-Unique file naming was broken for files which already had an underscore in them.
	-Properly report that png is the default format of EmberRender and EmberAnimate output instead of erroneously claiming it was jpg.
	-Make command line programs search these folders in this order for the palette file:
		./
		~/.fractorium
		~/.config/fractorium
		/usr/share/fractorium
		/usr/local/share/fractorium
	-Fix possible bad values in hexes.
	-Better assignment of Z variables.
	-Fix boarders due to use of poorly implemented rint() function from flam3. Use std::rint() now.
	-wedge_sph was completely wrong due to having accidentally swapped the mapping of two parameters.
	-Make juliascope juliascope_power parameter be of type REAL_NONZERO since it's used as a denominator.
	-Make Z assignment compatible with the originals in:
		--arch, bcircle, bCollide, bent, bent2, bisplit, blob, blur_linear, blur_square, bMod, boarders, boarders2, bSwirl, bTransform, butterfly, cardioid, cell, circleblur, circlize, circlize2, circus, collideoscope, cos, cosine, cosh, coth, cpow, cpow2, crescents, cropn, csc, csch, curl, curve, dc_gridout, deltaa, diamond, disc2, eclipse, eCollide, edisc, eJulia, elliptic, eMod, eMotion, ennepers, epispiral, ePush, eRotate, eScale, eSwirl, ex, exp, expo, exponential, fan, fdisc, fibonacci, fibonacci2, fisheye, flipcircle, flipy, flower, flux, funnel, glynnia, GlynnSim1, GlynnSim2, GlynnSim3, gridout, handkerchief, heart, hole, idisc, julia, julian2, juliaNab, kaleidoscope, lazyTravis, Lissajous, mask, MobiusN, mobius_strip, modulus, murl, murl2, npolar, ortho, oscilloscope, parabola, perspective, petal, phoenix_julia, pie (was also inconsistent between cpu and gpu), poincare, popcorn, popcorn2, power, pow_block, rational3, rays, rblur, rings, rippled, roundspher, sec, secant2, sigmoid, sin, sineblur, sinh, sinusgrid, sphericaln, spiralwing, spirograph, split, squarize, squirrel, squish, sschecks, starblur, stripes, stwin, super_shape, tan, tancos, tangent, tanh, TwinTrian, twoface, unpolar, waves, wavesn, wedge_julia, whorl, xheart, zblur, zscale.
	-Make precalcs for all hypertile variations safer by using Zeps() for denominators.
	-Changing the current xform with more than one selected would set all xform's color index value that of the current one.
	-Use hard found palette path information for randoms as well.
	-OpenCL build and assignment errors for Z value in epispiral variation.
	-Unitialized local variables in hexaplay3D, crob, pRose3D.
	-Devices settings was empty on first run, so switching to OpenCL had no effect until the user manually selected a device in the options dialog. Fix by defaulting to device 0 if present.
	-Add control key as a modifier to increase the amount a spinbox is changed when using right mouse drag to edit. Previously only observed shift key to decrease the value.
	-Change the copy/paste selected xforms shortcuts to be Ctrl+X+C and Ctrl+X+V.
	
--Code changes
	-Generalize Variation::PrecalcHelper() and rename to PrePostPrecalcHelper().
		--Do the same for the OpenCL version and rename it PrePostPrecalcOpenCLString().
	-Rename Variation::m_AssignType to m_PrePostAssignType since it's only relevant to pre/post variations.
	-More conversion to C++11 style code.
	-Add another value to the eXformUpdate enum called UPDATE_CURRENT_AND_SELECTED.
	-Remove some old #defines.
	-Change static member variables from m_ to s_.
	-Get rid of excessive endl and replace with "\n".
	-Remove old IMAGEGL2D define from before Nvidia supported OpenCL 1.2.
	-Remove old CriticalSection code and use std::recursive_mutex.
	-Make Affine2D Rotate() and RotateTrans() take radians instead of angles.
	-Split VariationList into .h/cpp files.
		--Make VariationList.cpp the only place where the variations files are included from. This speeds up the build, but variations can no longer be directly instantiated.
		--Variations are no longer exported.
	-Add function Fractorium::IsXformSelected() to determine if an xform has been selected with the checkboxes.
	-Cleanup warnings.
	-General cleanup.
 
0.9.9.3 Beta 01/17/2016
--User changes
	-Add new variations: crackle, dc_perlin and post_smartcrop.
	-Make default palette interp mode be linear instead of step.
	-Make summary tab the selected one in the Info tab.
	-Allow for highlight power of up to 10. It was previously limited to 2.
	-Add the following modes to synth:
		-MODE_SHIFTNSTRETCH 14
		-MODE_SHIFTTANGENT 15
		-MODE_XMIRROR 17
		-MODE_XYMIRROR 18
		-MODE_SPHERICAL2 19
	-Clamp synth_mode, synth_*_type and synth_*_layer to valid values.
	
--Bug fixes
	-Crash on linux when saving style due to null pointer in m_Theme variable.
	-Omit duplicate entries in error reports.
	-Properly report missing palette file in command line programs.
	-Direct color calculations were wrong.
	-Flattening was not applied to final xform.
	-Fix "pure virtual function call" error on shutdown.
	-Wrong point assignment in hexaplay3D, hexnix3D.
	-Improper Z assignment in rblur.
	-Fix inconsistency with original in circlecrop.
	-synth was broken due to passing synth_mode to Interpolate, rather than synth_smooth.
	-Changes in the xaos grid were not always being processed due to rounding.
	-Long standing animation looping but that goes all the way back to flam3.
	
--Code changes
	-Qualify math function with std::
	-Allow for array precalc params in variations by adding a size member to the ParamWithName class.
	-In IterOpenCLKernelCreator, memcpy precalc params instead of a direct assign since they can now be of variable length.
	-Add new file VarFuncs to consolidate some functions that are common to multiple variations. This also contains texture data for crackle and dc_perlin.
	-Place OpenCL versions of these functions in the FunctionMapper class in the EmberCL project.
	-Add new Singleton class that uses CRTP, is thread safe, and deletes after the last reference goes away. This fixes the usual "delete after main()" problem with singletons that use the static local function variable pattern.
	-Began saving files with AStyle autoformatter turned on. This will eventually touch all files as they are worked on.
	-Add missing backslash to CUDA include and library paths for builds on Nvidia systems.
	-Add missing gl.h include for Windows.
	-Remove glew include paths from Fractorium, it's not used.
	-Remove any Nvidia specific #defines and build targets, they are no longer needed with OpenCL 1.2.
	-Fix bad paths on linux build.
	-Convert all enums to class enum to be consistent with C++11 style.
	-Convert some if/else statements in filter classes to case statements.
	-Add overloaded stream operators to print various enums.
	-Optimize crob, nBlur.
	-Fix weird assignment statement in falloff3.
	-Replace fabs() with std::abs().
	-General cleanup.
	
0.9.9.2 Beta 11/22/2015
--User changes
	-Add a new dialog for editing QSS stylesheets. Allow for saving, reloading and setting styles as default.
	-Include a dark style with the installation called dark.qss.
	-Also add support for themes such as Fusion.
	-Resize some controls to better fit with the new style.
	-Add an option to specify the number of random embers generated on startup. 1 is the minimum and the default.
	-Add new variations: bubbleT3D, crob, hexaplay3D, hexcrop, hexes, hexnix3D, loonie2, loonie3, nBlur, octapol and synth.
	-Allow for pre/post versions of dc_bubble, dc_cylinder and dc_linear whereas before they were omitted.
	-When saving a file with multiple embers in it, detect if time values are all the same and if so, start them at zero and increment by 1 for each ember.
	-Allow for numerous quality increases to be coalesced into one. It will pick up at the end of the current render.
	-Show selection highlight on variations tree in response to mouse hover. This makes it easier to see for which variation or param the current mouse wheel action will apply.
	-Make default temporal samples be 100, whereas before it was 1000 which was overkill.
	-Require the shift key to be held with delete for deleting an ember to prevent it from triggering when the user enters delete in the edit box.
		-This wasn't otherwise fixable without writing a lot more code.
	
--Bug fixes
	-EmberGenome was crashing when generating a sequence from a source file with more than 2 embers in it.
	-EmberGenome was improperly handling the first frame of a merge after the last frame of the loop.
		-These bugs were due to a previous commit. Revert parts of that commit.
	-Prevent a zoom value of less than 0 when reading from xml.
	-Slight optimization of the crescents, and mask variations, if the compiler wasn't doing it already.
	-Unique file naming was broken because it was looking for _# and the default names ended with -#.
	-Disallow renaming of an ember in the library tree to an empty string.
	-Severe bug that prevented some variations from being read correctly from params generated outside this program.
	-Severe OpenCL randomization bug. The first x coordinates of the first points in the first kernel call of the first ember of a render since the OpenCL renderer object was created were not random and were mostly -1.
	-Severe bug when populating xform selection distributions that could sometimes cause a crash due to roundoff error. Fix by using double.
	-Limit the max number of variations in a random ember to MAX_CL_VARS, which is 8. This ensures they'll look the same on CPU and GPU.
	-Properly enable/disable thread priority label in final render dialog in response to enable/disable of the OpenCL checkbox.
	-Remove all inline stylesheets.
	-Show xaos spinners with 6 decimal places.
 
--Code changes
	-Generalize using the running sum output point inside of a variation for all cases: pre, reg and post.
	-Allow for array variables in variations where the address of each element is stored in m_Params.
	-Qualify all math functions with std::
	-No longer use our own Clamp() in OpenCL, instead use the standard clamp().
	-Redesign how functions are used in the variations OpenCL code.
	-Add tests to EmberTester to verify some of the new functionality.
	-Place more const and override qualifiers on functions where appropriate.
	-Add a global rand with a lock to be used very sparingly.
	-Use a map instead of a vector for bad param names in Xml parsing.
	-Prefix affine interpolation mode defines with "AFFINE_" to make their purpose more clear.
	-Allow for variations that change state during iteration by sending a separate copy of the ember to each rendering thread.
	-Implement this same functionality with a local struct in OpenCL. It's members are the total of all variables that need to change state within an ember.
	-Add Contains() function to Utils.h.
	-EmberRender: print names of kernels being printed with --dump_kernel option.
	-Clean up EmberTester to handle some of the recent changes.
	-Fix various casts.
	-Replace % 2 with & 1, even though the compiler was likely doing this already.
	-Add new file Variations06.h to accommodate new variations.
	-Remove redundant comparisons to nullptr, use ! instead;
	-Give some controls valid names instead of the auto generated ones.
	-DoubleSpinBoxTableItemDelegate.h: Add virtual keyword to overridden functions.
	-General cleanup.
	
0.9.9.0 Beta 09/21/2015
--Bug fixes:
	-Fix crash on startup when no GPU present.

0.9.9.0 Beta 09/19/2015 (Major contributions from Simon Detheridge)
--User changes
	-Add option to display affines in polar coords.
	-Show OpenCL program build errors on info tab, when compilation fails.
	-Add color curves adjustment widget and corresponding entry in the flame xml file.
	-Add the ability to delete/select an ember at a given index in EmberFile with delete and enter keys.
	-Add the ability to save ember Xmls to an unique automatically generated name after the first time the user has specified a name.
	-Add automatic filename padding to animations in EmberAnimate and Fractorium.
	-Allow for multiple palette files rather than hard coding to flam3-palettes.xml.
	-Make xaos display a matrix in its own tab rather than a single column in the xforms tab.
	-Remove xaos from/to button since it's no longer applicable.
	-Add the ability to apply operations to a selection of xforms, rather than just the current one.
	-Add the ability to set the current xform by pressing F1 - F32.
	-Add the ability to toggle an entire row or column of xaos values.
	-Add the ability to click the right mouse button and drag to adjust values in spinners.
	-Allow for toggling row and column of affine tables.
	-Add the ability to copy and paste xforms between flames.
	-Allow for setting rendering thread priorities.
	-Show estimated time left on the final render dialog.
	-Sort palette list by name, instead of by index in the palette file.
	-Sorting can be flipped by clicking the column headers of the palette table.
	-Allow for detaching of top level tabs in the dock widget so workspaces can be customized and saved between runs.
	-Add linked xform support, with new button and icon on the xforms tab.
	-Add an additional animation motion function named Saw (Simon Detheridge).
	-Add motion support at the ember level instead of just individual xforms (Simon Detheridge).
	-Add an offset to existing motion elements, to start them partway through their cycle.
	-Add Summary tab to the info dock, place existing bounds related info in a new Bounds tab.
	-Add a toolbar with the most common actions on it, remove old toolbar at the top of the library tab.
	-Add variations filter/selection dialog that applied to randoms and is also saved in the settings.
	-Remove Hue as a saved parameter, as well as animation parameters associated with it. It's now a GUI-only field that is never saved.
	-Make histogram, density filter buffer, and all associated fields always float, even when using double. In that case, only the iteration calculations are now double. Suggested by Thomas Ludwig.
	-Print all three kernels in EmberRender when the --dump_kernel option is specified.
	-Add Simon Detheridge's name to the About Box.
	-Add support for multiple GPU devices.
		--These options are present in the command line and in Fractorium.
		--Change scheme of specifying devices from platform, device to just total device index.
			---Single number on the command line.
			---Change from combo boxes for device selection to a table of all devices in Fractorium.
	-Temporal samples defaults to 100 instead of 1000 which was needless overkill.
	-Make combo boxes have zero margins, they were getting clipped on Linux.
	-Make xform weight cell slightly wider, it was getting clipped on Linux.
	-Adjust height of final render dialog to make it look better on Linux.
	
--Bug Fixes
	-Fix status bar height on retina displays.
	-Reduce the amount of ComputeCamera() and MakeDmap() calls on each incremental iter that doesn't use temporal samples.
	-Fix clamping bug with DE filter widths.
	-Prevent extra newline in EmberRender when only rendering a single image.
	-Add and call ClearFinalImages() to clear buffers in controller to fix bug where previous CPU render would be shown for a split second when switching from OpenCL back to CPU.
	-Refactor ember library pointer syncing to a function SyncPointers().
	-Use a non-imbued stringstream to generate output filename.
	-Fix NAN in equalized weight calculation when all weights are set to 0.
	-Prevent xform index flickering whenever changing the number of xforms.
	-Fix tab tool tips again.
	-Only correct variation names/params during parsing when the source of the Xml file is not from Ember/Fractorium.
	-Order of affine scale up/down buttons was reversed from what's intuitive.
	-Projection was not properly being set when animating flames with 3D parameters.
	-Eliminate delay when switching between single and double precision.
	-Convert motion_frequency to floating point.
	-Make loops and motion_frequency params to EmberGenome work correctly, and convert to double.
	-Allow for empty fields in template files.
	-Better application wide exception handling and diagnostics.
	-Put Nvidia block size in DE back to 24 where it used to be. Nvidia fails when it's 32.
	-Fix misspelling of the word "Rendering" in failure messages in final render dialog.
	-Properly disable add final xform button when a final xform is present.
	-Move some kernel initialization to a place where it's done once per render, rather than on every interactive iter chunk.
	-FractoriumXformsColor.cpp: Checking for null pixmap pointer is not enough, must also check if the underlying buffer is null via call to QPixmap::isNull().
	-Remove some old style sheet code on the xforms tab that doesn't seem to make sense and was probably just a workaround for a transient Qt bug, of which there are hundreds.
	-Set auto fill background for all of the nested tabs on the ui. This has ping ponged back and forth since the beginning of this project.
	
--Code Changes
	-General code cleanup in many places.
	-Major work to build on Mac and Linux.
	-Better use of const functions.
	-Force all float literals in OpenCL variations to correct precision.
	-Remove ReadMe.txt from all project files.
	-Provide functions to return the kernels from RendererCL to assist with diagnostics and debugging.
	-Remove unnecessary resize() in Interpolate().
	-Explicitly namespace calls to sqrt() and isnan().
	-Clean up strange nested usage of Update([&]()) calls when changing xform color index via either the spinner or scroll bar. Made no sense.
	-Make ISAAC RandBit() use RandByte() to be slightly more efficient.
	-Put FillXforms() in the controller where it belongs, rather than the main window class.
	-Add UpdateXform() function to the controller to handle applying operations to multiple xforms.
	-Remove the word "Current" out of most xform related functions because they now operate on whatever is selected.
	-Properly use Update() for various xform operations whereas before it was manually calling UpdateRender().
	-Also properly use Update() in places where it was erroneously using UpdateXform() for things that did not involve xforms.
	-Block signals in FillXaosTable().
	-Add new file named FractoriumXformsSelect.cpp to handle new xform selection code.
	-Remove ForEach() wrappers and replace with range based for loops with auto.
	-Replace every regular for loop with a range based one where applicable. Note this doesn't work everywhere.
	-Make event filter application wide.
	-Add parameter to FillXforms() to specify the index to select, default 0.
	-Rename some scroll areas and layouts to names that make sense, rather than their designer defaults.
	-Fix some pedantic gcc errors about missing template keyword.
	-Use QTableView instead of QTableWidget for the xaos table.
	-Remove unnecessary connect() statement in Variations tab.
	-Variation tree and associated widgets no longer actually contain variation objects, only IDs.
	-Refactor code to make a color visible on a background into VisibleColor() in FractoriumCommon.h
	-Add IsXformLinked() to determine if an xform is linked to another.
	-Remove SetPaletteRefTable() and GetQRgbFromPaletteIndex() from FractoriumEmberControllerBase and its derivations, unused.
	-Add FillSummary() to FractoriumEmberController. Call in Update(), UpdateXform() and other places where values are changed to force an update of the summary view.
	-Add export statements to FractoriumInfo.cpp.
	-Remove image parameter from SetPaletteTableItem(), it was a bad design.
	-Refactor code to get a palette color at a given index and convert it to a QColor to ColorIndexToQColor().
	-Remove a file named Fractorium.aps which had been erroneously committed a year ago.
	-Use qobject_cast instead of dynamic_cast where appropriate.
	-Add more override keyword where appropriate.
	-Add small function ShutdownAndRecreateFromOptions() to wrap shutting down the timer and recreating the renderer.
	-Use the overridden accept() and reject() functions more consistently across dialogs.
	-De-templatized DEOpenCLKernelCreator and FinalAccumOpenCLKernelCreator. They now just take a bool as a parameter to specify double precision.
	-To accommodate the buffers being float, introduce a new #define types in EmberCL called real4_bucket, and real4reals_bucket.
	-Density and spatial filtering structs now use this type.
	-ConvertDensityFilter() and ConvertSpatialFilter() no longer return a value, they just assign to the member.
	-Make ConvertCarToRas() just assign to the member rather than return a struct.
	-Make kernel string accessor functions in IterOpenCLKernelCreator, FinalAccumOpenCLKernelCreator and DEOpenCLKernelCreator be const and return a const string reference.
	-Don't include atomic string unless locking on the GPU, which is never.
	-Add bool to Alloc() to only allocate memory for the histogram. Needed for multi-GPU.
	-Ember.h: Add case for FLAME_MOTION_NONE and default in ApplyFlameMotion().
	-EmberMotion.h: Call base constructor.
	-EmberPch.h: #pragma once only on Windows.
	-EmberToXml.h:
	--Handle different types of exceptions.
	--Add default cases to ToString().
	-Isaac.h: Remove unused variable in constructor.
	-Point.h: Call base constructor in Color().
	-Renderer.h/cpp:
	--Add bool to Alloc() to only allocate memory for the histogram. Needed for multi-GPU.
	--Make CoordMap() return a const ref, not a pointer.
	-SheepTools.h:
	--Use 64-bit types like the rest of the code already does.
	--Fix some comment misspellings.
	-Timing.h: Make BeginTime(), EndTime(), ElapsedTime() and Format() be const functions.
	-Utils.h:
	--Add new functions Equal() and Split().
	--Handle more exception types in ReadFile().
	--Get rid of most legacy blending of C and C++ argument parsing.
	-XmlToEmber.h:
	--Get rid of most legacy blending of C and C++ code from flam3.
	--Remove some unused variables.
	-EmberAnimate:
	--Support multi-GPU processing that alternates full frames between devices.
	--Use OpenCLInfo instead of OpenCLWrapper for --openclinfo option.
	--Remove bucketT template parameter, and hard code float in its place.
	--If a render fails, exit since there is no point in continuing an animation with a missing frame.
	--Pass variables to threaded save better, which most likely fixes a very subtle bug that existed before.
	--Remove some unused variables.
	-EmberGenome, EmberRender:
	--Support multi-GPU processing that alternates full frames between devices.
	--Use OpenCLInfo instead of OpenCLWrapper for --openclinfo option.
	--Remove bucketT template parameter, and hard code float in its place.
	-EmberRender:
	--Support multi-GPU processing that alternates full frames between devices.
	--Use OpenCLInfo instead of OpenCLWrapper for --openclinfo option.
	--Remove bucketT template parameter, and hard code float in its place.
	--Only print values when not rendering with OpenCL, since they're always 0 in that case.
	-EmberCLPch.h:
	--#pragma once only on Windows.
	--#include <atomic>.
	-IterOpenCLKernelCreator.h: Add new kernel for summing two histograms. This is needed for multi-GPU.
	-OpenCLWrapper.h:
	--Move all OpenCL info related code into its own class OpenCLInfo.
	--Add members to cache the values of global memory size and max allocation size.
	-RendererCL.h/cpp:
	--Redesign to accomodate multi-GPU.
	--Constructor now takes a vector of devices.
	--Remove DumpErrorReport() function, it's handled in the base.
	--ClearBuffer(), ReadPoints(), WritePoints(), ReadHist() and WriteHist() now optionally take a device index as a parameter.
	--MakeDmap() override and m_DmapCL member removed because it no longer applies since the histogram is always float since the last commit.
	--Add new function SumDeviceHist() to sum histograms from two devices by first copying to a temporary on the host, then a temporary on the device, then summing.
	--m_Calls member removed, as it's now per-device.
	--OpenCLWrapper removed.
	--m_Seeds member is now a vector of vector of seeds, to accomodate a separate and different array of seeds for each device.
	--Added member m_Devices, a vector of unique_ptr of RendererCLDevice.
	-EmberCommon.h
	--Added Devices() function to convert from a vector of device indices to a vector of platform,device indices.
	--Changed CreateRenderer() to accept a vector of devices to create a single RendererCL which will split work across multiple devices.
	--Added CreateRenderers() function to accept a vector of devices to create multiple RendererCL, each which will render on a single device.
	--Add more comments to some existing functions.
	-EmberCommonPch.h: #pragma once only on Windows.
	-EmberOptions.h:
	--Remove --platform option, it's just sequential device number now with the --device option.
	--Make --out be OPT_USE_RENDER instead of OPT_RENDER_ANIM since it's an error condition when animating. It makes no sense to write all frames to a single image.
	--Add Devices() function to parse comma separated --device option string and return a vector of device indices.
	--Make int and uint types be 64-bit, so intmax_t and size_t.
	--Make better use of macros.
	-JpegUtils.h: Make string parameters to WriteJpeg() and WritePng() be const ref.
	-All project files: Turn off buffer security check option in Visual Studio (/Gs-)
	-deployment.pri: Remove the line OTHER_FILES +=, it's pointless and was causing problems.
	-Ember.pro, EmberCL.pro: Add CONFIG += plugin, otherwise it wouldn't link.
	-EmberCL.pro: Add new files for multi-GPU support.
	-build_all.sh: use -j4 and QMAKE=${QMAKE:/usr/bin/qmake}
	-shared_settings.pri:
	-Add version string.
	-Remove old DESTDIR definitions.
	-Add the following lines or else nothing would build:
	CONFIG(release, debug|release) {
		CONFIG += warn_off
		DESTDIR = ../../../Bin/release
	}
	
	CONFIG(debug, debug|release) {
		DESTDIR = ../../../Bin/debug
	}
	
	QMAKE_POST_LINK += $$quote(cp --update ../../../Data/flam3-palettes.xml $${DESTDIR}$$escape_expand(\n\t))
	LIBS += -L/usr/lib -lpthread
	-AboutDialog.ui: Another futile attempt to make it look correct on Linux.
	-FinalRenderDialog.h/cpp:
	--Add support for multi-GPU.
	--Change from combo boxes for device selection to a table of all devices.
	--Ensure device selection makes sense.
	--Remove "FinalRender" prefix of various function names, it's implied given the context.
	-FinalRenderEmberController.h/cpp:
	--Add support for multi-GPU.
	--Change m_FinishedImageCount to be atomic.
	--Move CancelRender() from the base to FinalRenderEmberController<T>.
	--Refactor RenderComplete() to omit any progress related functionality or image saving since it can be potentially ran in a thread.
	--Consolidate setting various renderer fields into SyncGuiToRenderer().
	-Fractorium.cpp: Allow for resizing of the options dialog to show the entire device table.
	-FractoriumCommon.h: Add various functions to handle a table showing the available OpenCL devices on the system.
	-FractoriumEmberController.h/cpp: Remove m_FinalImageIndex, it's no longer needed.
	-FractoriumRender.cpp: Scale the interactive sub batch count and quality by the number of devices used.
	-FractoriumSettings.h/cpp:
	--Temporal samples defaults to 100 instead of 1000 which was needless overkill.
	--Add multi-GPU support, remove old device,platform pair.
	-FractoriumToolbar.cpp: Disable OpenCL toolbar button if there are no devices present on the system.
	-FractoriumOptionsDialog.h/cpp:
	--Add support for multi-GPU.
	--Consolidate more assignments in DataToGui().
	--Enable/disable CPU/OpenCL items in response to OpenCL checkbox event.
	-Misc: Convert almost everything to size_t for unsigned, intmax_t for signed.
	-Upgrade Intel Threading Building Blocks library to 4.4
	-Upgrade glm to 0.9.7
	-Add version resource files to Ember and EmberCL projects.
	-Update copyright to 2015 for all version resources.
	
0.4.1.8 Beta 01/23/2015
--User changes
	Thread image writing in EmberAnimate and when doing animation sequence in final render dialog.
	Add total time output for verbose mode in EmberAnimate to match EmberRender.

--Bug Fixes
	Fix incorrect parsing of legacy "symmetry" xform Xml element.
	Fix incorrect iters ran/requested percentage in EmberAnimate to match EmberRender.
	Fix motion blur being disabled when doing animations in final render dialog.
	Allow for boolean command line options which default to true to be set to false.

--Code Changes
	Minor changes to enable a Mac build.
	Double the memory required for the final output buffer in RendererBase::MemoryRequired() when threading image writing.
	Reuse same buffer for RgbaToRgb() in EmberRender and EmberAnimate.
	Only resize in RgbaToRgb() if the two vectors are not the same.
	Add a final output buffer ping-ponging mechanism to facilitate threaded writes in controllers.

0.4.1.7 Beta 01/02/2015
--User changes
	Use actual strips count when computing memory requirements in the final render dialog.
	Output CL_DEVICE_ADDRESS_BITS when passing --openclinfo to command line programs.
	Warn if single/total allocations are greater than the max allowed for OpenCL in the final render dialog.
	Make about box properly sized for different fonts.
	Dock widget is slightly resizable now.
	Center scroll area when loading a new ember.

--Bug Fixes
	Fix bad values left in an ember when a render with strips > 1 fails in the final render dialog.
	Fix incorrect calculation in dc_cube variation when using OpenCL.

--Code Changes
	Major work to get it running on Linux.
	Migrate from QGLWidget to QOpenGLWidget.
	Delayed init due to QOpenGLWidget.
	Break RendererBase::MemoryRequired() into two functions, it and HistMemRequired() and return a tuple.
	Add GlobalMemSize() and MaxAllocSize() functions in OpenCLWrapper.
	Change CHOOSE_XFORM_GRAIN to be 16384, so we can & with 16383 instead of using modulo when selecting an xform. This results in a 9% speed increase on the CPU.
	Save each newly loaded ember in a file called "last.flame" in the executable folder. This will help diagnose crashes that occur when switching embers.
	Use nullptr instead of NULL in the Fractorium project. It had previously been done in all other places.

0.4.1.6 Beta 11/29/2014
--User Changes
	None.

--Bug Fixes
	Fix broken continuity of randomness in OpenCL when using strips, broken in last build.
	Fix broken density filtering dimensions in OpenCL which left black lines, broken in last build.
	Fix broken preview update on when the only change is scale.
	Update density filtering progress bar to 100% in final render dialog when DE radius is 0 (disabled).
	
--Code Changes
	Make RendererBase::RandVec() virtual.

0.4.1.5 Beta 11/28/2014
--User Changes
	Remove limit on the number of xforms allowable on the GPU. This was previously 21.
	Show actual strips count to be used in parens outside of user specified strips count on final render dialog.
	Allow for adjustment of iteration depth and fuse count per ember and save/read these values with the xml.
	Iteration optimizations on both CPU and GPU.
	Automatically adjust default quality spinner value when using CPU/GPU to 10/30, respectively.

--Bug Fixes
	Fix severe randomization bug with OpenCL.
	Fix undo list off by one error when doing a new edit anywhere but the end of the undo list.
	Make integer variation parameters use 4 decimal places in the variations list like all the others.
	New build of the latest Qt to fix scroll bar drawing bug.
	Prevent grid from showing as much when pressing control to increase a spinner's increment speed. Still shows sometimes, but better than before.

--Code Changes
	Pass count and fuse to iterator as a structure now to allow for passing more params in the future.
	Slightly different grid/block logic when running DE filtering on the GPU.
	Attempt a different way of doing DE, but #define out because it ended up not being faster.
	Restructure some things to allow for a variable length xforms buffer to be passed to the GPU.
	Add sub batch size and fuse count as ember members, and remove them from the renderer classes.
	Remove m_LastPass from Renderer. It should have been removed with passes.
	Pass seeds as a buffer to the OpenCL iteration kernel, rather than a single seed that gets modified.
	Slight optimization on CPU accum.
	Use case statement instead of if/else for xform chosing in OpenCL for a 2% speedup on params with large numbers of xforms.
	Add SizeOf() wrapper around sizeof(vec[0]) * vec.size().
	Remove LogScaleSum() functions from the CPU and GPU because they're no longer used since passes were removed.
	Make some OpenCLWrapper getters const.
	Better ogranize RendererCL methods that return grid dimensions.

0.4.1.4 Beta 11/04/2014
--User Changes
	Remove custom focusing logic from spin boxes. This was originally done to overcome a bug in Qt that has since been fixed.
	Add Random Xaos button.
	Remove passes, they were never used.

--Bug Fixes
	Fix uniqe names and estimated iter count in final render dialog.
	Fix using non-zero rotation with strips.
	Fix locale decimal commas bug with affine adjustment combo boxes.
	Fix accidental disabling of post affine group box. The designer was clobbering it.
	Remove PaletteImage option from command line programs, it's unused.
	Improve documentation for some other command line options.
	
--Code Changes
	Replace all instances of auto_ptr with unique_ptr.
	Remove * operator from Affine2D, it was unused.
	
0.4.1.3 Beta 10/14/2014
--User Changes
	Size is no longer fixed to the window size.
	Size scaling is done differently in the final render dialog. This fixes several bugs.
	Remove Xml saving size from settings and options dialog, it no longer applies.
	Final render can be broken into strips.
	Set default save path to the desktop if none is found in the settings file.
	Set default output size to 1920x1080 if none is found in the settings file.

--Bug Fixes
	Better memory size reporting in final render dialog.

--Code Changes
	Migrate to C++11, Qt 5.3.1, and Visual Studio 2013.
	Change most instances of unsigned int to size_t, and int to intmax_t.
	Add m_OrigPixPerUnit and m_ScaleType to Ember for scaling purposes.
	Replace some sprintf_s() calls in XmlToEmber with ostringstream.
	Move more non-templated members into RendererBase.
	Add CopyVec() overload that takes a per element function pointer.
	Add vector Memset().
	Replace '&' with '+' instead of "&amp;" in XmlToEmber for much faster parsing.
	Break strips rendering out into EmberCommon and call from EmberRender and Fractorium.
	Make AddAndWriteBuffer() just call WriteBuffer().
	Make AddAndWriteImage() delete the existing image first before replacing it.
	Add SetOutputTexture() to RendererCL to support making new textures in response to resize events.
	Remove multiple return statements in RendererCL, and replace with a bool that tracks results.
	Add ToDouble(), MakeEnd(), ToString() and Exists() wrappers in Fractorium.
	Add Size() wrapper in EmberFile.
	Make QString function arguments const QString&, and string with const string&.
	Make ShowCritical() wrapper for invoking a message box from another thread.
	Add combo box to TwoButtonWidget and rename.

0.4.1.2 Beta 08/05/2014
--User Changes
	Add --yaxisup and --supersample options for command line programs.

--Bug Fixes
	Make certain options available only to the command line programs in which they make sense. Most were good, some were misplaced.

--Code Changes
	Include pure render time as part of stats.
	Output iters/sec measurement in EmberRender and EmberAnimate.	

0.4.1.1 Beta 08/03/2014
--Bug Fixes
	Spatial filter would not be correctly recreated on subsequent runs of differing supersample values during final render.
	Fix DCBubble, Funnel, SphericalN, 
	Wrong logic with some usage of DO_DOUBLE. Only relevant for testing.
	Use uint64 for iters/sec calculation on final render dialog. int was overflowing on extremely fast GPU renders.

--Code Changes
	Make density, spatial and temporal filters preserve the values they were created with. This helps in determining when a new instance is needed.
	Better NULL checks when copying embers and xforms.
	Rename members in FractoriumEmberControllerBase.h to omit duplicating the members declared in the base.
	
0.4.1.0 Beta 07/29/2014
--Bug Fixes
	Final render dialog didn't create the renderer properly on first run when more than one platform was present.

0.4.0.9 Beta 07/27/2014
--User Changes
	Properly set tab order on all controls.
	Calculate and report iters/second in the final render dialog.
	Immediately draw yellow dot on xform mouse down on previously unselected xform.

--Bug Fixes
	Fix GlynnSim1, GlynnSim2, GlynnSim3 and juliaNab by ensuring the first argument to pow() is >= 0.
	Ensure OpenCL platform and device combo boxes in the final render dialog expand as needed.

--Code Changes
	Make VariationTreeSpinbox take its parent VariationTreeWidgetItem as a constructor argument. This makes SetupVariationTree() and VariationSpinBoxValueChanged() more efficient.
	Make Interference2 and ho use fabs().

0.4.0.8 Beta 07/26/2014
--Bug Fixes
	Fix falloff, falloff2, falloff3.

0.4.0.7 Beta 07/26/2014
--User Changes
	Color code xforms like Apo does.
	Change other aspects of xform color drawing.
	Add option to invert the Y axis to both the options final render dialogs.
	Coordinate Y axis setting with preview renders.
	Add option to show all xforms when dragging. Previously, only the current one was shown.
	Make final render dialog appear in the middle of the screen.
	Immediately draw yellow selection dot on mouse down.

--Bug Fixes
	Resize final render dialog vertically if it's taller than the 90% of the desktop area.

0.4.0.6 Beta 07/22/2014
--User Changes
	Place certain areas of the UI on scroll panels so they are not obscured on low resolution monitors.

0.4.0.5 Beta 07/18/2014
--User Changes
	Allow for vibrancy values > 1.
	Add flatten and unflatten menu items.
	Automatically flatten like Apophysis does.
	Add plugin and new_linear tags to Xml to be compatible with Apophysis.
	
--Bug Fixes
	Fix blur, blur3d, bubble, cropn, cross, curl, curl3d, epispiral, ho, julia3d, julia3dz, loonie, mirror_x, mirror_y, mirror_z, rotate_x, sinusoidal, spherical, spherical3d, stripes.
	Unique filename on final render was completely broken.
	Two severe OpenCL bugs. Random seeds were biased and fusing was being reset too often leading to results that differ from the CPU.
	Subtle, but sometimes severe bug in the setup of the xaos weights.
	Use properly defined epsilon by getting the value from std::numeric_limits, rather than hard coding 1e-6 or 1e-10.
	Omit incorrect usage of epsilon everywhere. It should not be automatically added to denominators. Rather, it should only be used if the denominator is zero.
	Force final render progress bars to 100 on completion. Sometimes they didn't seem to make it there.
	Make variation name and params comparisons be case insensitive.
	
--Code Changes
	Make ForEach and FindIf wrappers around std::for_each and std::find_if.

0.4.0.1 Beta 07/06/2014
--Bug Fixes
	Fix name collision of mobius and Mobius. The former is treated as mobius_strip.

0.4.0.0 Beta 07/06/2014
--User Changes
	Addition of over 200 new variations.
	Almost all variations now come with pre and post version. Bringing the total to almost 900. Pre/post are omitted for some direct coloring variations.
	Support for 3D fields from Apophysis: cam_zpos, cam_persp, cam_yaw, cam_pitch, cam_dof.
	Support for direct coloring dc_ variations.
	Allow for saturation spin box to go negative like Apo does.
	Select all when first clicking in any of the spin boxes.
	Add a Clear Xaos button to easily reset all xaos values to 1.
	Default threads to processors - 1 for first time users to keep the UI more responsive.
	The following variations have extra precalcs added to them and should run faster: bent2, bipolar, blob, cpow, curve, escher, fan2, flux, modulus, oscilloscope, rings2, separation, split, wedge.

--Bug Fixes
	The wrong visibility value was being used on final xforms.
	The options dialog was not being restored to the previous UI state when the user clicked cancel.
	Pie variation was not properly using the slices parameter.
	Erroneously included gutter when computing bounds and units of OpenGL display window.
	Needlessly calling floor() when calculating histogram index during point accumulation.

--Code Changes
DoubleSpinBox
	Change step.
	Allow for selecting all on click by making the line edit a custom derived class.

Ember
	Add new fields and functions for 3D projection.
	Add new export macro to handle pre, regular and post variations.
	Add function to get a list of pointers to the variations present in all xforms with no duplicates and only single entries for reg, pre and post types. Used to construct OpenCL function strings.
	Better calling of CacheXforms() in interpolate.

EmberAnimate, EmberGenome, EmberRender
	Print platform and device information when running with OpenCL.

EmberCLFunctions
	Add new global math functions to correspond to the ones added in Utils.

EmberCLStructs
	Add support for 3D fields.
	Make m_LastXfUsed be a member of PointCL, rather than a local variable declared in the kernel.

EmberDefines
	Add a define to only instantiate float type. Useful for reducing build times while debugging, and removed on release.
	Add defines: M_2PI, M_3PI, CUBE, TLOW, TMAX, m3T, acosh and fma. The last two will be removed once the project moves to C++11 in the future.

EmberFile
	Add UniqueFilename() function to ensure what we save is never overwritten with subsequent saves.

EmberTester
	Add many test functions to test the integrity of the Variations design. This will be made into a formal testing suite in the future, but for now is just a collection of global functions.

EmberToXml
	Write out legacy symmetry field in addition to color speed for each xform.
	Write out name field for each xform for Apo compatibility.

FinalRenderDialog
	Add MoveCursorToEnd() signal function to be called from the final render thread.

FinalRenderEmberController
	Call invokeMethod to move cursor to the end rather than directly. This was possibly causing intermittent crashes before.
	When saving on render complete, call new UniqueFilename() function for saving both the xml and the image to ensure no overwriting occurs.

Fractorium
	Add functions to support 3D.

FractoriumColor
	Add fields and functions to support direct coloring.

FractoriumPalette
	Allow for saturation to go negative like Apo does.

FractoriumParams
	Add functions to support 3D.

FractoriumVariations
	Add min/max range for params.
	Call SetParamVal() on spinner change rather than directly assining to the param to ensure values are in a valid range.

Interpolate
	Use new SetParamVal() function for interpolating all params. This ensures the interpolated values are in the proper range specified by each variation.
	Use M_2PI constant.

Isaac
	Make ALPHA template argument 4 instead of 8 for more compactness.
	Make functions inline.
	Add check for modulo zero in ranged Rand().

Iterator
	Add support for 3D projections.
	During fuse loop, iterate on the same point rather than to the samples buffer to be more cache friendly. Gives a ~1% speedup.

IterOpenCLKernelCreator
	Add support for 3D projections.
	Add support for new pre/reg/post variation design.
	Directly assign points rather than doing one field at a time.

OptionsDialog
	Add reject() function to restore the UI to the previous state when the user clicks cancel.

PaletteList
	Remove Isaac member and use the new global one instead.

Point
	Add m_Z member for 3D.

Renderer
	Make temporary Isaac seeds buffer match 1 << ISAAC_SIZE, rather than hard code to 256.

RendererCL
	Copy new 3D and DC fields to EmberCL object.

Utils
	Add a global Isaac object for use in places where none exists. Only to be used in single threaded scenarios.
	Add many functions for use in new variations: ClampMod(), ClampLteRef(), Sign(), Sqr(), SafeSqrt(), Cube(), Hypot(), Spread(), Powq4(), Powq4c(), Zeps(), Lerp(), Fabsmod(), Fosc(), Foscn(), LogScale(), LogMap().
	Add new int Floor<T>(T val) function that is faster than the system floor() and use it everywhere. Time test proved to be faster.

Variation
	Complete redesign of variations. Split into multiple files to avoid one becoming unweildy.
	Each variation will have a type: pre, regular or post, and will have an assignment type that dictates how the results will be assigned to the output points: direct assign or sum, to be used in pre and post variations. Regular ones always sum.
	Variation enums are now sorted alphabetically rather than the traditional arbitrary sorting of flam3.
	Add Precalc() and PrecalcOpenCLString() functions to be called with pre and post variations. Placed here instead of xform because they depend on the variation type, pre or post.
	Add additional functions to help handle pre/post logic and naming.
	Add fields to specify valid value ranges for parametric params. Taken from Apo.
	Reserve 5 for params vector in parametric variations.
	Add randomization function for parametric variations.
	Use new range and value checked Set() function in CopyParamVals() instead of directly assigning values.
	Add non-null checks in copy macros to delete to prevent a memory leak.
	Add new macros to handle creating and copying pre and post variations.
	
VariationList
	Add new macro for handling the adding of pre, regular, and post variations.
	Add three new vectors to hold pointers, but not copies, to pre, regular and post variations.
	Add helper function GetVariationCopy().
	
Xform
	Add direct color support.
	Major rework of Apply() function to use new style of pre/reg/post variations as well as direct coloring.
	Add Read() functions and their OpenCL counterparts, to handle reading from the appropriate inputs for pre and post variations.
	Move members around to match the order they're accessed to be more cache friendly.
	
XmlToEmber
	Add support for 3D fields, direct color, and the legacy symmetry field.
	Correct poorly named variations and their parameters.
	Remove Isaac member and use the new global one instead.

	
0.3.7.3 Beta 05/04/2014 (Intermediate commit without an associated release)
--User Changes
	Fix a bug that reset the render when adjusting a parameter of a variation whose weight was zero. Now only update the render if the variation is actually present with a non-zero weight.
	Add many new variations, with more to come. Any Z coordinate functionality has been commented out for the time being until 3D support is added.
	Preserve xform index during undo/redo.
	In EmberRender and EmberAnimate, report iters as ran/requested rather than requested/ran.

--Code Changes
Solution
	Update glm, libjpeg, libpng, libxml2 and tbb to their latest versions.
	Change include/link order for every project for all configurations and platforms to prefer AMD over nVidia since AMD's OpenCL support is more current.

Variations
	Split variations into three files, Variation.h, PreVariations.h, and PostVariations.h.
	Add many new variations from the Apophysis plugins.
	Place Variations in their own project filter folder in Ember.

Affine2D
	Change the name of the template parameter to T instead of Tt.
	Make T() function O().
	Remove glm typedefs, they are global now.

EmberDefines
	Add some new constant defines.
	Add global glm defines.

Utils
	Add some additional rounding functions needed in the newly added variations.

Xform
	Split variations into three separate lists for regular, pre and post variations.
	Add new function to retrieve the total variation count between all three lists.
	Add other various functionality to handle the three lists.

EmberCLFunctions
	Add OpenCL equivalent of new rounding functions.

EmberCLStructs
	Add OpenCL equivalent of new constant defines.
	Rearrange the members of the structures to match the order they are used in, and remove unused members.

IterOpenCLKernelCreator
	Add support for the three variations lists in each xform.

OpenCLWrapper
	Add #define to use Image2DGL for OpenCL 1.1 on nVidia, or ImageGL for OpenCL 1.2 on AMD.
	Fix a glaring bug (device and platform = 0 in the constructor) that was compiling, but was causing an out of bounds memory read under the covers and was only detected in debug mode.


0.3.7.2 Beta 04/16/2014
--User Changes
	Fix bug where images with a high number of bad values would crash the rendering process on nVidia cards.
	Disable mouse wheel scrolling when it's held down for panning. This makes panning easier on sensitive mice.

--Code Changes

Variations
	Begin implementing more variations from Apophysis, but leave them disabled for now.

Ember
	Fixed a bug when adding symmetry to an ember that sorted all of the xforms by color speed value, instead of only the newly added symmetry xforms.

IterOpenCLKernelCreator
	Fixed a bug where final xform was considered for the randomly selected xform during each iteration. It was never actually hit, but should have never been there regardless.
	Major change in how bad values were being handled. They were failing out on nVidia but running ok on AMD, but giving worse images. Now it's done in a while loop to avoid severe warp divergence.


0.3.7.1 Beta 04/07/2014
--User Changes
	Fixed a bug that accidentally disabled double precision support on nVidia cards in the last commit.


0.3.7.0 Beta 04/06/2014
--User Changes
	Support for most recent AMD cards.
	Final render dialog is now non-modal, allowing the main window to be minimized while doing a lengthy render.
	Fixed device selection which was completely broken in the final render dialog.
	Save backup Xml before rendering starts just in case it crashes mid way through. The backup file is deleted upon successful render completion.
	Set the GPU_MAX_ALLOC_PERCENT env var to 100 to allow full usage of GPU memory.
	New --dump_kernel command line option for EmberRender to print the kernel if using OpenCL.
	Fix hiding of xform indices in the xforms combo when their count was >= 10 by making the combo slightly wider.
	Add ABCDEF to affine xform values table to clarify the meaning of x1, y1, x2, y2, o1, o2.
	Variations is now the default shown tab when clicking into the xforms tab.

--Code Changes

IterOpenCLKernelCreator, DEOpenCLKernelCreator, OpenCLWrapper
	Support for AMD.
	
EmberCLFunctions
	Support for AMD.
	When resizing a buffer, clear the existing one first to avoid having both resident in memory for a brief moment.

EmberCLStructs
	Allow for 21 xforms per ember, was previously 17.

RendererCL
	Support AMD.
	Limit variations per xform to MAX_CL_VARS.

EmberTreeWidgetItem
	Derive EmberTreeWidgetItem from EmberTreeWidgetItemBase to make casting possible since a templated argument can't be passed to invokeMethod().

Fractorium
	New functions to allow updating the preview renders from within a thread better.

FractoriumLibrary
	Better flushing of event queues when starting and stopping preview renderer.
	Place a try/catch block around EmberTreeItemChanged() because it seems to get called spurriously for tree items that have already been deleted.

FractoriumEmberController
	Fix bug where Fractorium would crash when opening a new file before the preview renders were finished by doing two things: Updating the thumbnail via invokeMethod() and using BlockingQueuedConnection for that call.


0.3.6.0 Beta 03/11/2014
--User Changes
	Fix bug when using early clip.
	Fix crash when more than once device is present.
	Fix bug where saving the current Xml would continually prompt.
	Fix bug where renderer wouldn't reinitialize after changing platform or device.
	Add default click values for: brightness, gamma, gamma threshold, vibrancy, highlight power, spatial filter width, min and max DE radius, DE curve, 

--Code Changes

EmberCL.vcxproj
	Add paths for AMD APP SDK. Support will be coming in the following months.
	
Renderer
	Fix bug in EarlyClip() function signature that prevented it from being overrided, add const in base.
	Formatting cleanup.

EmberCLStructs
	Remove typedefs for sbyte, byte and uint. They are not needed.

IterOpenCLKernelCreator
	Change byte to uchar.

OpenCLWrapper
	Fix bug in DeviceAndPlatformNames() that would crash the program when more than one platform was present.

FractoriumLibrary
	Fix bug where saving the current Xml would continually prompt.

FractoriumRenderer
	Fix bug where renderer wouldn't reinitialize after changing platform or device.

OptionsDialog
	Better initialization of the platform/device combo boxes when more than one platform/device is present.


0.3.5.0 Beta 02/14/2014
--User Changes
	Add Hemisphere variation because it was needed for some testing. Many more to follow soon.
	Integer spin boxes can be scrolled by 1 when shift is held down.
	Support for dragging and dropping multiple files.
	Support for DnD and pasting Xml over the current file or appending them to it.
	Proper behavior when zero variations are present. This differs from flam3, but makes more sense.
	Preview and scaling options when doing a final render.
	Bug fix in EmberGenome that would crash when creating a sequence that included embers with final Xforms in them.

--Code Changes

Ember
	Add two members to preserve the original raster width and height of an ember as it was read from file. This is used for aspect ratio calculations later on.
	
EmberDefines
	Add two new enums for render status and scaling preference.

EmberToXml
	Make some buffers size 128 instead of 100.
	Add function AddFilenameWithoutAmpersand() to ensure an ampersand is never added to the edits because Xml can't parse those.
	Error in ConvertLinearToPolar() was calling GetXform(). Changed to GetTotalXform().

PaletteList
	Use a string instead of a vector because it's needed now to deal with ampersands.

Renderer, RendererCL
	Rendering functions now no longer return just true or false. Rather, they return an enum indicating whether it ran ok, with an error, or aborted.
	Ok function was inadvertently made not to be an override in OpenCL. Fixed by adding const to match the base.

SheepTools
	Clean up to use our modern design instead of some remnants left over from flam3.
	Consolidate variation weight normalization to a function call, NormalizeVariationWeights().

Utils
	Add some functionality to EmberReport.
	Add a function FindAndReplace() to replace all isntances of a value within a collection with a specified value.

Variation, VariationList
	Formatting cleanup.
	Add new variation Hemisphere().

Xform
	Change the behavior for when zero variations are present to just treat them as linear variations with weight 1.

XmlToEmber
	Formatting cleanup.
	Preserve original raster width and height in new member variables.
	Reserve space in the embers vector based on a rough estimate of how many are present in the file.
	Account for strings which contain an ampersand, which Xml can't parse.

EmberCommon
	Generalize CreateRenderer() function to work in all scenarios, which reduced code duplication in the GUI.

EmberRender, EmberAnimate, EmberGenome
	Better error reporting when renderer creation fails.

IterOpenCLKernelCreator
	Update GPU side to use the new Xform behavior when variations are empty.

DoubleSpinBox
	Style cleanup.

EmberFile
	Remove unused CreateRenderer() function.

EmberTreeWidgetItem
	Use RGBA for previews because that's what QPixmap prefers.

FinalRenderDialog
	General cleanup.
	Support for new scaling features.

FinalRenderEmberController
	Add support for preview renders.
	Support for new scaling features.
	Use new CreateRenderer() function.
	Use invokeMethod() for all GUI updates inside of the render and preview threads. This was causing an occasional crash before.
	Preserve the state of some of the checkboxes that were not being saved before.

Fractorium
	Add support for drag n drop of multiple files at once.
	Better drag n drop code.

FractoriumEmberController
	Make the preview renderer keep one core free, instead of maxing out all cores.

FractoriumInfo
	Use invokeMethod() to account for when ErrorReportToQTextEdit() is called from a thread.

FractoriumLibrary
	General cleanup.
	Add support for undo/redo list.

FractoriumMenus
	Add support for undo/redo list.
	Add support pasting Xml as an append, as well as a replacement.
	Preserve original dimension with new m_OrigFinalRasW and m_OrigFinalRasH fields.
	Better handling of unicode and html junk in pasted strings.
	Stop preview render whenever the open file/list of embers changes in response to user action.

FractoriumRender
	Add support for undo/redo list.
	Clear both front and back screen buffers on the main window when showing the final render dialog.
	Use new CreateRenderer() function.

FractoriumSettings
	General cleanup and reordering.
	Add support for saving scaling options from the final render dialog.
	Preserve the state of some of the checkboxes that were not being saved before.

SpinBox
	Add a default small step of 1 to be used when scrolling and holding shift. DoubleSpinBox already had this functionality.


0.3.4.0 Beta 01/26/2014
--User Changes
	Fix bug where the last few rows of an image weren't being rendered.
	Add commas to various command line numerical outputs to make them easier to read.
	Apply sort mode to variations list every time filter is changed or cleared.
	Prevent crash when clicking on main window before initialization is complete on program startup.

--Code Changes

OpenCLWrapper, RendererCL
	Refactor to better separate OpenCL detection from initialization. This should help detect devices better.
	
EmberOptions
	Fix small formatting errors in command line help text.

EmberFile
	Prevent assign to self.


0.3.3.0 Beta 01/23/2014
--User Changes
	More intelligent checking for OpenCL.
	Greater zoom amount when scrolling the mouse wheel on the main window.

0.3.2.0 Beta 01/19/2014
--User Changes
	Add previews to open embers in the Library tab.
	Allow for starting and stopping the preview renderer.
	Make library tab first and automatically selected.
	Fix the ngon and rays variations to use the sum of the squares, instead of their square root. Ngon and rays were completely erroneous before this fix.
	Add support for copying and pasting Xml text from and into the GUI.
	Holding shift while scrolling xform weight adjusts the value by 0.001 for more precise manipulation.

--Code Changes

CarToRas
	Prevent assign to self.
	Remove padded variables for bounds checking, and check bounds properly. Also discovered that even when points are in bounds, the roundoff error from converting to raster can put them out of bounds. Add a final check in Accum.

DensityFilter
	General cleanup.
	Save the filter width (oddly enough, this wasn't being done before).
	Add a vector of indices that is used in OpenCL to apply the filter by row, rather than moving from the center outward. This fixes a race condition when applying the DE filter on the GPU.
	Remove FinalMinRad, FinalMaxRad and ActualMaxRad members and accessor functions.

Affine2D, Color, Ember, Palette, Point, Variation, Xform
	Prevent assign to self.

Renderer
	Fully setup gutter width the way smoulder does.
	In GaussianDensityFilter(), do a more optimized assignment of the bucket hit count if SS=1.
	Reorder the assignments for the case (jj == ii) to be cache efficient.
	In Accumulate(), add one final check after Car to Ras conversion to make absolutely sure it's within bounds. This was the source of a seldom occurring, but lethal memory error.

EmberToXml
	Clamp supersample to always be greater than 1 just to be safe.

XmlToEmber
	Add a Parse() overload that takes a vector<unsigned char>.
	More consistent formatting of error messages.
	Add, but comment out, an attempt to capture missing variations when parsing. Revisit later.

FractoriumEmberController, FractoriumMenus
	Properly account for scale when opening from file, dragging and dropping, or pasting Xmls into the GUI.

FractoriumParams
	Allow brightness to go to 50 and gamma to go to 9999.
	Allow spatial filter width to go down to 0.1, was 0.4 before.

FractoriumRender
	Renderer was not properly being created when returning from options if params other than OpenCL or double precision were changed. Now properly construct for all options changes.

FractoriumSettings
	Default XmlSupersample to 2 if not found in settings file.

FractoriumXformsAffine
	Respect world vs. local pivot when flipping affine to mimic Apophysis behavior. Was previously always using world pivot behavior.
	
FractoriumXformsColor
	NULL check for empty pixmap on startup.

GLWidget
	Check for m_Init in SetSelectedXform() to avoid recursive paint operation.

EmberCLStructs
	Remove pad members from CarToRas structures to mirrow the CPU side.
	
EmberCLFunctions
	Remove AddToAccum functions, they are no longer used with new DE code. Add AccumCheck() function to check bounds, but not accumulate.
	Change CarToRasInBounds() to check bounds the same way the new CPU code does.

IterOpenCLKernelCreator
	Add histSize parameter to kernel.
	Add (histIndex < histSize) check after call to CarToRasConvertPointToSingle() to match the extra check done on the CPU side now. This will guarantee memory errors will never happen while iterating.

RendererCL
	Add support for different block widths and heights for DE.
	Add a DE coefficients buffer for applying DE by row, which fixes the race condition problem that occurs when applying from the center outward.
	DE blocksize is now 32x32, unless SS>1 or type is double, in which case they run at 32x30.
	Add debugging code in GaussianDensityFilter() to fall back to the CPU for testing, leave commented out.

DEOpenCLKernelCreator
	Re-design to apply filter by row, rather than from the center outward. This solves the race condition error that would lead to missing pixels on some images.
	Eliminate needless variables and make every effort to get the kernel as compact as possible. This allows running a block size of 32x32.
	Rename blockHistCol and blockHistRow to threadHistCol and threadHistRow since that's what they are.
	In CreateGaussianDEKernel(), have the last row accumulate since it's slightly faster than having the first row do it.
	In CreateGaussianDEKernel(), Change the local buffer to be size 3000.


0.3.1.0 Beta 01/06/2014
--User Changes
	Changing size when dragging in an image (orig -> window), resizing (window -> window), or doing a final render (window -> final render) now compensates for scale (pixels per unit).
	Spatial filter width now allows values >= 0 and defaults to 0.4.
	All spinners now scroll by the normal step / 10 when holding shift. Variation spinners are a special case and scroll by 0.001 with shift held down.
	Final render now shows pure render time along with total time.	
	Fix bug in final render dialog where only the first image in the file would get rendered.
	Installer will now uninstall the previous version automatically.
	Installer now includes this file.
	About box now fully specifies version with 4 digits.

--Code Changes
-Ember
	Add function SetSizeAndAdjustScale() to adjust the scale for a size change.

-RendererCL
	Report error when adding spatial filter params fails, which can happen when GPU memory runs out.

-DoubleSpinBox
	Add m_Step and m_SmallStep members to specify how much to scroll by based on the keyboard modifier.

-FinalRenderEmberController
	Add m_TotalTimer member to differentiate between render time and total time.


0.3 Beta 12/27/2013
--User Changes
	Support for single and double precision data types in Fractorium.
	Support for single and double precision data types with OpenCL.
	Support for --nstrips on the command line with OpenCL.
	Support for --lock_accum on the command line.
	Fix memory errors.
	Fix affine circle selection bugs.
	
--Code Changes
Provide templated copy constructors and assignment operators for:
	-Affine2D
	-CarToRas
	-Color
	-Ember
	-Palette
	-Point
	-Variation

-CarToRas
	More clearly name raster bounds member variables.

-DensityFilter
	Make a non-templated base with a single virtual function.
	Make ToString() and other member functions const.

-Ember.cpp
	Better export defines for single and double template classes.
	Only export double template classes with the same type, no more type mixing.

-Ember.h
	Add EqualizeWeights() function.
	Replace INTERP macros with templated function that take member variable addresses as template parameters.
	Supply proper template type for some mat2x3 objects in Interpolate().
	Make TotalXformCount() const like XformCount().
	Make CompareEmbers() static function conform to new std comparison signature, taking two references and returning a bool.
	Make ToString() const.

EmberDefines.h
	Explicitly specify types for all enums.

Isaac.h
	Improve code style.

Palette.h
	Require template argument for newRgb parameter in CalcNewRgb() to support copying to pixels of a different type (float to double, or double to float).

Renderer.h/cpp
	Derive Renderer<T, bucketT> from a non-templated based named RendererBase.
	Add virtual function MakeDmap() which creates the scaled, final palette to use so that RendererCL can override it to specifically use a float palette at all times.
	Check results of AccumulatorToFinalImage() instead of blindly assuming it succeeded.
	Add virtual function Callback() to set the callback object.
	Fix bug in ogScaleDensityFilter() which was causing the last line not to be filtered by starting at the gutter width offset. Filter all pixels now.
	Properly template temporary bucket objects in GaussianDensityFilter(), AccumulatorToFinalImage(), Accumulate(), AddToAccum() and GammaCorrection().
	Fix bug in Iterate() where the returned iter count was junk due to overflow. Use unsigned __int64 for everything, including literals with the ULL suffix.
	Properly template m_Dmap and m_AccumulatorBuckets members.
	Add virtual MemoryAvailable() function to return how much memory is available on the CPU, or on the GPU in derived classes.

SheepTools.h
	Allow it to take two template parameters to pass to the internal renderer.

SpatialFilter.h
	Make ToString(), Filter() and other member functions const.

TemporalFilter.h
	Make ToString() and other member functions const.

Utils.h
	Add global static function CopyVec() to copy a vector of one type to another.
	Add global static function RgbaToRgb() to copy an RGBA buffer to an RGB one.
	Add global static function ClampGte0Ref() as a thin wrapper.

Variation.h
	Supply templated copy constructors to support creating copies of variations using different types.
	Use initializer in Variation constructor for m_Name to avoid unnecessary string constructor call.
	Make ToString() const.
	Add two new virtual functions to all variations to make a copy of themselves using a different type and placing the new object in a reference to a pointer passed in.
	Add ParentXform() function.
	Rename SetParentXform() to ParentXform().
	Use real_t instead of float to support double in OpenCL.

-Xform.h
	Rename m_Density member to m_Weight.
	Make ToString() and other member functions const.
	

EmberRender, EmberAnimate, EmberGenome:
	Take two template arguments to pass to renderer.
	Better handling of erroneous arguments for bits per channel and thread count when using OpenCL.
	Use proper std::sort() comparison function.
	Support saving as 3 channel image, such as bmp or jpg when using 4 channels with OpenCL.
	Add --lock_accum option.
	Add full double precision support for OpenCL.
	Add support for --nstrips when using OpenCL.
	Ensure strips divide evenly into the final raster image height.
	Move CalcStrips() out of EmberEnder.cpp and into EmberCommon.h.
	Dump errors if anything went wrong while rendering.

EmberCL
	Template all kernel creators to support float and double.
	
DEOpenCLKernelCreator.h/cpp
	Put global barrier on all accum writes.
	Only use no-cache version when using double.

EmberCLFunctions.h
	Support double, including when doing atomics using ulong for the int part of the unions.

EmberCLStructs.h
	Template all CL structures.
	Remove m_MinRad and m_MaxRad from DensityFilterCL since they are never used.

FinalAccumOpenCLKernelCreator.h/cpp
	Template all.

IterOpenCLKernelCreator.h/cpp
	Template all.
	Fix glaring bug in zeroize kernel that was writing past the end of memory. Most likely the source of previous crashes.

OpenCLWrapper.h/cpp
	Add support for double.

RendererCL.h/cpp
	Template to support double.
	Use cached color values m_ColorSpeedCache and m_OneMinusColorCache instead of m_Density and m_ColorX.
	In RunDensityFilter(), reduce the block size by 2 when running with double, else the GPU runs out of resources.

Fractorium.h/cpp
	Complete rework to a controller architecture to move the processing code out of the GUI and to support templating.

	
0.2 Beta 11/2013
-Minor fixes.
-Install to Program Data to avoid admin privileges errors.


0.1 Beta 11/2013
-Initial release.
